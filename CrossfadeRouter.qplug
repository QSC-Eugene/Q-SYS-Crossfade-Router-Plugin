-- Eugene Dunn
-- QSC
-- June 2023

PluginInfo = {
  Name = "Crossfade Router",
  Author = "Eugene Dunn",
  BuildVersion = "1.2.0.23",
  Version = "1.2",
  Id = "333c8f3d-a3e4-46fe-9c44-d76e3d95d188",
  Description = "A drop in replacement for a Router Component that utilizes internal crossfaders"
}
local Colors = {
  White = {255, 255, 255},
  Black = {0, 0, 0},
  Red = {255, 0, 0},
  Green = {0, 255, 0},
  Blue = {0, 0, 255},
  Gray = {136, 136, 136},
  LightGray = {51,51,51},
  PluginColor = {147,169,213}
}

-- Define the color of the plugin object in the design
function GetColor(props)
  return Colors.PluginColor
end

-- The name that will initially display when dragged into a design
function GetPrettyName(props)
  return PluginInfo.Name .. "\r" .. PluginInfo.Version
end

-- Optional function used if plugin has multiple pages
PageNames = {"Control","Settings"} --List the pages within the plugin
function GetPages(props)
  local pages = {}
  for ix,name in ipairs(PageNames) do
    table.insert(pages, {name = PageNames[ix]})
  end
  return pages
end

-- Define User configurable Properties of the plugin
function GetProperties()
  local props = {}
  table.insert(
    props,
    {
      Name = "Input Count",
      Type = "integer",
      Value = 8,
      min = 2,
      Max = 32
    }
  )
  table.insert(
    props,
    {
      Name = "Output Count",
      Type = "integer",
      Value = 8,
      min = 1,
      Max = 32
    }
  )
  table.insert(
    props,
    {
      Name = "Type",
      Type = "enum",
      Value = "Mono",
      Choices = {"Mono", "Stereo", "Multi-channel"}
    }
  )
  table.insert(
    props,
    {
      Name = "Count",
      Type = "integer",
      Value = 8,
      min = 2,
      Max = 64
    }
  )
  return props
end

-- Optional function to define pins on the plugin that are not connected to a Control
function GetPins(props)
  local pins = {}
  if props["Type"].Value == "Mono" then
    for x = 1, props["Input Count"].Value do
      table.insert(
        pins,
        {
          Name = "Input " .. x,
          Direction = "input"
        }
      )
    end
  
    for x = 1, props["Output Count"].Value do
      table.insert(
        pins,
        {
          Name = "Output " .. x,
          Direction = "output"
        }
      )
    end
  elseif props["Type"].Value == "Stereo" then
    for x = 1, props["Input Count"].Value do
      table.insert(
        pins,
        {
          Name = "Input " .. x .. " Left",
          Direction = "input"
        }
      )
      table.insert(
        pins,
        {
          Name = "Input " .. x .. " Right",
          Direction = "input"
        }
      )
    end
  
    for x = 1, props["Output Count"].Value do
      table.insert(
        pins,
        {
          Name = "Output " .. x .. " Left",
          Direction = "output"
        }
      )
      table.insert(
        pins,
        {
          Name = "Output " .. x .. " Right",
          Direction = "output"
        }
      )
    end
  elseif props["Type"].Value == "Multi-channel" then
    for x = 1, props["Input Count"].Value do
      for y = 1, props["Count"].Value do
        table.insert(
          pins,
          {
            Name = "Input " .. x .. " Channel " .. y,
            Direction = "input"
          }
        )
      end
    end
  
    for x = 1, props["Output Count"].Value do
      for y = 1, props["Count"].Value do
        table.insert(
          pins,
          {
            Name = "Output " .. x .. " Channel " .. y,
            Direction = "output"
          }
        )
      end
    end
  end
  return pins
end

-- Optional function to update available properties when properties are altered by the user
function RectifyProperties(props)
  props["Count"].IsHidden = (props["Type"].Value ~= "Multi-channel")
  return props
end

-- Optional function to define components used within the plugin
function GetComponents(props)
  local components = {}
  local multiType = props["Type"].Value
  local multiTypeIndex = 0
  
  if multiType == "Mono" then
    multiTypeIndex = 1
  elseif multiType == "Stereo" then
    multiTypeIndex = 2
  elseif multiType == "Multi-channel" then
    multiTypeIndex = 3
  end
  
  table.insert(
    components,
    {
      Name = "Router",
      Type = "router_with_output",
      Properties = {
        ["n_inputs"] = props["Input Count"].Value,
        ["n_outputs"] = (props["Output Count"].Value * 2),
        ["multi_channel_type"] = multiTypeIndex,
        ["multi_channel_count"] = props["Count"].Value
      }
    }
  )
  
  for x = 1, (props["Output Count"].Value) do
    table.insert(
      components,
      {
        Name = "XFader" .. x,
        Type = "crossfader",
        Properties = {
          ["multi_channel_type"] = multiTypeIndex,
          ["multi_channel_count"] = props["Count"].Value
        }
      }
    )
    table.insert(
      components,
      {
        Name = "Gain" .. x,
        Type = "gain",
        Properties = {
          ["multi_channel_type"] = multiTypeIndex,
          ["multi_channel_count"] = props["Count"].Value
        }
      }
    )
  end
  return components
end

-- Optional function to define wiring of components used within the plugin
function GetWiring(props)
  local wiring = {}
  if props["Type"].Value == "Mono" then
    for x = 1, props["Input Count"].Value do
      table.insert(
        wiring,
        {
          "Input " .. x,
          "Router Input " .. x
        }
      )
    end
    for x = 1, props["Output Count"].Value do
      table.insert(
        wiring,
        {
          "Gain" .. x .. " Output",
          "Output " .. x
        }
      )
      table.insert(
        wiring,
        {
          "XFader" .. x .. " Output",
          "Gain" .. x .. " Input"
        }
      )
      table.insert(
        wiring,
        {
          "Router Output " .. x,
          "XFader" .. x .. " Input A"
        }
      )
      table.insert(
        wiring,
        {
          "Router Output " .. (x + props["Output Count"].Value),
          "XFader" .. x .. " Input B"
        }
      )
    end
  elseif props["Type"].Value == "Stereo" then
    for x = 1, props["Input Count"].Value do
      table.insert(
        wiring,
        {
          "Input " .. x .. " Left",
          "Router Input " .. x .. " Left"
        }
      )
      table.insert(
        wiring,
        {
          "Input " .. x .. " Right",
          "Router Input " .. x .. " Right"
        }
      )
    end
    for x = 1, props["Output Count"].Value do
      table.insert(
        wiring,
        {
          "Gain" .. x .. " Output Left",
          "Output " .. x .. " Left"
        }
      )
      table.insert(
        wiring,
        {
          "Gain" .. x .. " Output Right",
          "Output " .. x .. " Right"
        }
      )
      table.insert(
        wiring,
        {
          "XFader" .. x .. " Output Left",
          "Gain" .. x .. " Input Left"
        }
      )
      table.insert(
        wiring,
        {
          "XFader" .. x .. " Output Right",
          "Gain" .. x .. " Input Right"
        }
      )
      table.insert(
        wiring,
        {
          "Router Output " .. x .. " Left",
          "XFader" .. x .. " Input A Left"
        }
      )
      table.insert(
        wiring,
        {
          "Router Output " .. x .. " Right",
          "XFader" .. x .. " Input A Right"
        }
      )
      table.insert(
        wiring,
        {
          "Router Output " .. (x + props["Output Count"].Value) .. " Left",
          "XFader" .. x .. " Input B Left"
        }
      )
      table.insert(
        wiring,
        {
          "Router Output " .. (x + props["Output Count"].Value) .. " Right",
          "XFader" .. x .. " Input B Right"
        }
      )
    end
  elseif props["Type"].Value == "Multi-channel" then
    for x = 1, props["Input Count"].Value do
      for y = 1, props["Count"].Value do
        table.insert(
          wiring,
          {
            "Input " .. x .. " Channel " .. y,
            "Router Input " .. x .. " Channel " .. y
          }
        )
      end
    end
    for x = 1, props["Output Count"].Value do
      for y = 1, props["Count"].Value do
        table.insert(
          wiring,
          {
            "Gain" .. x .. " Output Channel " .. y,
            "Output " .. x .. " Channel " .. y
          }
        )
        table.insert(
          wiring,
          {
            "XFader" .. x .. " Output Channel " .. y,
            "Gain" .. x .. " Input Channel " .. y
          }
        )
        table.insert(
          wiring,
          {
            "Router Output " .. x .. " Channel " .. y,
            "XFader" .. x .. " Input A Channel " .. y
          }
        )
        table.insert(
          wiring,
          {
            "Router Output " .. (x + props["Output Count"].Value) .. " Channel " .. y,
            "XFader" .. x .. " Input B Channel " .. y
          }
        )
      end
    end
  end
  return wiring
end

-- Defines the Controls used within the plugin
function GetControls(props)
  local ctrls = {}
  for x = 1, props["Output Count"].Value do
    table.insert(
      ctrls,
      {
        Name = "select_" .. x,
        ControlType = "Knob",
        ControlUnit = "Integer",
        DefaultValue = 1,
        PinStyle = "Both",
        UserPin = true,
        Min = 1,
        Max = props["Input Count"].Value
      }
    )
    table.insert(
      ctrls,
      {
        Name = "mute_" .. x,
        ControlType = "Button",
        ButtonType = "Toggle",
        PinStyle = "Both",
        UserPin = true
      }
    )
    table.insert(
      ctrls,
      {
        Name = "fading_" .. x,
        ControlType = "Indicator",
        IndicatorType = "Led",
        PinStyle = "Output",
        UserPin = true
      }
    )
    for y = 1, props["Input Count"].Value do
      table.insert(
        ctrls,
        {
          Name = "output_" .. x .. "_input_" .. y .. "_select",
          ControlType = "Button",
          PinStyle = "Both",
          UserPin = true,
          ButtonType = "Toggle"
        }
      )
    end
  end
  
  table.insert(
    ctrls,
    {
      Name = "Crossfade Time",
      ControlType = "Knob",
      PinStyle = "Both",
      UserPin = true,
      ControlUnit = "Float",
      Min = 0.01,
      Max = 100
    }
  )
  table.insert(
    ctrls,
    {
      Name = "Crossfade Type",
      ControlType = "Text",
      PinStyle = "Both",
      UserPin = true
    }
  )
  return ctrls
end

--Layout of controls and graphics for the plugin UI to display
function GetControlLayout(props)
  local layout = {}
  local graphics = {}
  local current_page = PageNames[props["page_index"].Value]
  
  local FSize = 11
  local labelSize = {40, 16}
  local textboxSize = {36, 16}
  local buttonSize = {36, 16}
  
  x = 4
  y = 4
  
  if current_page == PageNames[1] then --Routing
    table.insert(
      graphics,
      {
        Type = "GroupBox",
        Position = {x + labelSize[1] + 4, y},
        Size = {
          8 + (props["Output Count"].Value * textboxSize[1]),
          28 + ((props["Input Count"].Value + 2) * textboxSize[2]) + 44
        },
        Text = "Output",
        HTextAlign = "Left",
        StrokeColor = Colors.LightGray,
        StrokeWidth = 1,
        CornerRadius = 8,
        FontSixe = FSize
      }
    )
    y = 28 + labelSize[2]
    table.insert(
      graphics,
      {
        Type = "Label",
        Position = {x, y},
        Size = labelSize,
        Text = "Mute",
        HTextAlign = "Right",
        Color = Colors.LightGray,
        FontSixe = FSize
      }
    )
    x = x + labelSize[1] + 8
  
    for i = 1, props["Output Count"].Value do
      layout["mute_" .. i] = {
        Style = "Button",
        ButtonStyle = "Toggle",
        Position = {x, y},
        PrettyName = "Output " .. i .. "~Mute",
        Size = buttonSize,
        FontSize = FSize - 2,
        Padding = 0,
        Color = {223, 0, 36}
      }
      table.insert(
        graphics,
        {
          Type = "Label",
          Position = {x, y - labelSize[2]},
          Size = textboxSize,
          Text = tostring(i),
          HTextAlign = "Center",
          Color = Colors.LightGray,
          FontSixe = FSize
        }
      )
      x = x + textboxSize[1]
    end
    y = y + labelSize[2] + 4
    x = 4
    table.insert(
      graphics,
      {
        Type = "Label",
        Position = {x, y},
        Size = labelSize,
        Text = "Fading",
        HTextAlign = "Right",
        Color = Colors.LightGray,
        FontSixe = FSize
      }
    )
    x = x + labelSize[1] + 8
  
    for i = 1, props["Output Count"].Value do
      layout["fading_" .. i] = {
        Style = "Led",
        Position = {x + 10, y},
        PrettyName = "Output " .. i .. "~Fading",
        Size = {buttonSize[2], buttonSize[2]},
        FontSize = FSize - 2,
        Padding = 0,
        Color = Colors.Green
      }
      x = x + textboxSize[1]
    end
    y = y + labelSize[2] + 4
    x = 4
    table.insert(
      graphics,
      {
        Type = "Label",
        Position = {x, y},
        Size = labelSize,
        Text = "Input",
        HTextAlign = "Right",
        Color = Colors.LightGray,
        FontSixe = FSize
      }
    )
    x = x + labelSize[1] + 8
  
    for i = 1, props["Output Count"].Value do
      layout["select_" .. i] = {
        Style = "Text",
        Position = {x, y},
        PrettyName = "Output " .. i .. "~Select",
        Size = textboxSize,
        FontSize = FSize - 2,
        Padding = 0,
        Color = Colors.White,
        TextBoxStyle = "Normal"
      }
      x = x + textboxSize[1]
    end
  
    y = y + labelSize[2] + 4
  
    for i = 1, props["Input Count"].Value do
      x = 4
      table.insert(
        graphics,
        {
          Type = "Label",
          Position = {x, y},
          Size = labelSize,
          Text = tostring(i),
          HTextAlign = "Right",
          Color = Colors.LightGray,
          FontSixe = FSize
        }
      )
      x = x + labelSize[1] + 8
      for out = 1, props["Output Count"].Value do
        layout["output_" .. out .. "_input_" .. i .. "_select"] = {
          Style = "Button",
          ButtonStyle = "Toggle",
          Position = {x, y},
          PrettyName = "Output " .. out .. "~Input " .. i .. " Select",
          Size = buttonSize,
          Margin = 2,
          CornerRadius = 2,
          Padding = 0
        }
        x = x + buttonSize[1]
      end
      y = y + labelSize[2]
    end
  elseif current_page == PageNames[2] then --Settings
    table.insert(
      graphics,
      {
        Type = "GroupBox",
        Position = {x, y},
        Size = {250, 80},
        Text = "Crossfade Configure",
        HTextAlign = "Left",
        StrokeColor = Colors.LightGray,
        StrokeWidth = 1,
        CornerRadius = 8,
        FontSixe = FSize
      }
    )
    table.insert(
      graphics,
      {
        Type = "Label",
        Position = {8, 28},
        Size = {64, 36},
        Text = "Time",
        HTextAlign = "Right",
        Color = Colors.LightGray,
        FontSixe = FSize
      }
    )
    table.insert(
      graphics,
      {
        Type = "Label",
        Position = {8, 64},
        Size = {64, 16},
        Text = "Type",
        HTextAlign = "Right",
        Color = Colors.LightGray,
        FontSixe = FSize
      }
    )
  
    layout["Crossfade Time"] = {
      Style = "Knob",
      Position = {80, 28},
      Size = {36, 36},
      ShowTextBox = true
    }
    layout["Crossfade Type"] = {
      Style = "ComboBox",
      Position = {80, 64},
      Size = {170, 16},
      FontSize = FSize - 2,
      Padding = 0
    }
  end
  return layout, graphics
end

--Start event based logic
if Controls then
  Inputs = Properties["Input Count"].Value
  Outputs = Properties["Output Count"].Value
  
    local XFaders = {
      XFader1,
      XFader2,
      XFader3,
      XFader4,
      XFader5,
      XFader6,
      XFader7,
      XFader8,
      XFader9,
      XFader10,
      XFader11,
      XFader12,
      XFader13,
      XFader14,
      XFader15,
      XFader16,
      XFader17,
      XFader18,
      XFader19,
      XFader20,
      XFader21,
      XFader22,
      XFader23,
      XFader24,
      XFader25,
      XFader26,
      XFader27,
      XFader28,
      XFader29,
      XFader30,
      XFader31,
      XFader32,
      XFader33,
      XFader34,
      XFader35,
      XFader36,
      XFader37,
      XFader38,
      XFader39,
      XFader40,
      XFader41,
      XFader42,
      XFader43,
      XFader44,
      XFader45,
      XFader46,
      XFader47,
      XFader48,
      XFader49,
      XFader50,
      XFader51,
      XFader52,
      XFader53,
      XFader54,
      XFader55,
      XFader56,
      XFader57,
      XFader58,
      XFader59,
      XFader60,
      XFader61,
      XFader62,
      XFader63,
      XFader64
    }
    local Gains = {
      Gain1,
      Gain2,
      Gain3,
      Gain4,
      Gain5,
      Gain6,
      Gain7,
      Gain8,
      Gain9,
      Gain10,
      Gain11,
      Gain12,
      Gain13,
      Gain14,
      Gain15,
      Gain16,
      Gain17,
      Gain18,
      Gain19,
      Gain20,
      Gain21,
      Gain22,
      Gain23,
      Gain24,
      Gain25,
      Gain26,
      Gain27,
      Gain28,
      Gain29,
      Gain30,
      Gain31,
      Gain32
    }
  local CurrentSource = {}
  
  function SetFB(outputIndex)
    Controls["select_" .. outputIndex].Value = CurrentSource[outputIndex]
    for y = 1, Inputs do
      Controls["output_" .. outputIndex .. "_input_" .. y .. "_select"].Boolean = (y == CurrentSource[outputIndex])
    end
  end
  
  function GotoSource(input, output)
    local inactiveChannel = (not XFaders[output]["crossfade.to.A"].Boolean and {"A", output} or {"B", (output + Outputs)})
    Router["select." .. inactiveChannel[2]].Value = input
    XFaders[output]["crossfade.to." .. inactiveChannel[1]].Boolean = true
    CurrentSource[output] = input
    SetFB(output)
  end
  
  for x = 1, Outputs do
    if XFaders[x]["crossfade.to.A"].Boolean then
      CurrentSource[x] = math.floor(Router["select." .. x].Value)
    else
      CurrentSource[x] = math.floor(Router["select." .. (x + Outputs)].Value)
    end
    SetFB(x)
  
    Controls["select_" .. x].EventHandler = function(ctrl)
      GotoSource(ctrl.Value, x)
    end
    for y = 1, Inputs do
      Controls["output_" .. x .. "_input_" .. y .. "_select"].EventHandler = function(ctrl)
        if ctrl.Boolean then
          GotoSource(y, x)
        elseif not ctrl.Boolean and y == CurrentSource[x] then
          ctrl.Boolean = true
        end
      end
    end
  
    XFaders[x].position.EventHandler = function(ctrl)
      Controls["fading_" .. x].Boolean = not (ctrl.Position == 1 or ctrl.Position == 0)
    end
    Gains[x].mute.EventHandler = function(ctrl)
      Controls["mute_" .. x].Boolean = ctrl.Boolean
    end
    Controls["mute_" .. x].EventHandler = function(ctrl)
      Gains[x].mute.Boolean = ctrl.Boolean
    end
  end
  
  Controls["Crossfade Type"].Choices = {"-6dB Constant Gain", "-3dB Constant Power"}
  if Controls["Crossfade Type"].String == "" then
    Controls["Crossfade Type"].String = XFaders[1]["crossfade.type"].String
  end
  Controls["Crossfade Type"].EventHandler = function(ctrl)
    for x = 1, Outputs do
      XFaders[x]["crossfade.type"].String = ctrl.String
    end
  end
  Controls["Crossfade Time"].Value = XFaders[1]["crossfade.time"].Value
  Controls["Crossfade Time"].EventHandler = function(ctrl)
    for x = 1, Outputs do
      XFaders[x]["crossfade.time"].Value = ctrl.Value
    end
  end
end
